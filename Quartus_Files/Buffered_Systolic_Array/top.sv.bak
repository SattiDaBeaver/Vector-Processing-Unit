module top_systolic_module #(
    parameter DATA_WIDTH  = 8,
    parameter MATRIX_SIZE = 8,
    parameter ACC_WIDTH   = 32
)(
    input  logic                                clk,
    input  logic                                rst,
    input  logic                                acc_rst,
    input  logic                                acc_en,
    input  logic                                shift_en,

    // Top buffer interface
    input  logic                                load_en_top,
    input  logic [$clog2(MATRIX_SIZE)-1:0]      addr_top,
    input  logic [DATA_WIDTH-1:0]               data_in_top,
    input  logic                                swap_buffers_top,

    // Left buffer interface
    input  logic                                load_en_left,
    input  logic [$clog2(MATRIX_SIZE)-1:0]     addr_left,
    input  logic [DATA_WIDTH-1:0]               data_in_left,
    input  logic                                swap_buffers_left,

    output logic [DATA_WIDTH*MATRIX_SIZE-1:0]   data_out_flat_bottom,
    output logic [DATA_WIDTH*MATRIX_SIZE-1:0]   data_out_flat_right,
    output logic [ACC_WIDTH*MATRIX_SIZE*MATRIX_SIZE-1:0] acc_out_flat
);

    systolic_module #(
        .DATA_WIDTH(DATA_WIDTH),
        .MATRIX_SIZE(MATRIX_SIZE),
        .ACC_WIDTH(ACC_WIDTH)
    ) dut (
        .clk(clk),
        .rst(rst),
        .acc_rst(acc_rst),
        .acc_en(acc_en),
        .shift_en(shift_en),

        .load_en_top(load_en_top),
        .addr_top(addr_top),
        .data_in_top(data_in_top),
        .swap_buffers_top(swap_buffers_top),

        .load_en_left(load_en_left),
        .addr_left(addr_left),
        .data_in_left(data_in_left),
        .swap_buffers_left(swap_buffers_left),

        .data_out_flat_bottom(data_out_flat_bottom),
        .data_out_flat_right(data_out_flat_right),
        .acc_out_flat(acc_out_flat)
    );

endmodule
